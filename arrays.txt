1)minimum and maximum element -2091. Removing Minimum and Maximum From Array
 
class Solution {
    public int minimumDeletions(int[] nums) {
        if(nums.length==1)
        return 1;
        int min=nums[0],max=nums[0],imax=0,imin=0;
        for(int i=1;i<nums.length;i++)
        {
            if(nums[i]>max){
            max=nums[i];
            imax=i;
            }
            if(nums[i]<min){
            min=nums[i];
            imin=i;
            }
        }//think simple to remove the elements
        int fromfront=Math.max(imax+1,imin+1);
        int fromback=Math.max(nums.length-imax,nums.length-imin);
        int frombothends=Math.min(imax+1,nums.length-imax)+Math.min(imin+1,nums.length-imin);
        int ans=Math.min(fromfront,fromback);
        ans=Math.min(ans,frombothends);
        return ans;
       
       
    }
}

2)largest number- 414. Third Maximum Number

class Solution {
    public int thirdMax(int[] nums) {
        int max=-2147483648,smax=-2147483648,tmax=-2147483648;
        if(nums.length==1)
        return nums[0];
        if(nums.length==2&&nums[0]>nums[1])
        return nums[0];
         if(nums.length==2&&nums[1]>nums[0])
        return nums[1];
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==max||nums[i]==smax||nums[i]==tmax)
            continue;
            if(max<nums[i]){
                tmax=smax;
                smax=max;
            max=nums[i];
            continue;

            }
            if(smax<nums[i]){
                tmax=smax;
                smax=nums[i];
                continue;
            }
            if(tmax<nums[i])
            {
                tmax=nums[i];
                continue;
            }

        }
        
        int flag=1;
     for(int j=0;j<nums.length-1;j++)  //if all the elements in the array are same
     if(nums[j]==nums[j+1])
       flag++;
       Arrays.sort(nums);
       int in=1;
        for(int j=0;j<nums.length-1;j++)  // if there are only two distinct element in the array we return the max. element(problemstates)
        if(nums[j]!=nums[j+1])
        in++;
        
        if(tmax==-2147483648&&(in==2||flag==nums.length))
        return max;
        return tmax;
        
    }
}

3)missing number- 268. Missing Number

class Solution {
    public int missingNumber(int[] nums) {
      int i=0;
 while(i<nums.length)
 {
     int index=nums[i];
     if(nums[i]<nums.length&&nums[i]!=nums[index])
     swap(i,index,nums);
     else 
     i++;
 }
 for(int j=0;j<nums.length;j++)
 {
     if(nums[j]!=j)
     return j;
     

 }
 return nums.length;
}
public void swap(int a,int b,int[] nums)
{

int temp=nums[a];
nums[a]=nums[b];
nums[b]=temp;
       }
       
}

4) repeating elements

soln 1: 442. Find All Duplicates in an Array

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
                   int i=0;
         List<Integer> l=new ArrayList<Integer>(50);
 while(i<nums.length)
 {
     int index=nums[i]-1;
     if(nums[i]!=nums[index])
     swap(i,index,nums);
     else 
     i++;
 }
 for(int j=0;j<nums.length;j++)
 {
     if(nums[j]!=j+1){
     l.add(nums[j]);
     
     }
     

 }
 

 return l;
    }
    public void swap(int a,int b,int[] nums)
{

int temp=nums[a];
nums[a]=nums[b];
nums[b]=temp;
       }
    
}

        (or)

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        HashMap<Integer,Integer> m=new HashMap<>();
        List<Integer> list=new ArrayList<>();

        for(int i=0;i<nums.length;i++)
        {
            if(!m.containsKey(nums[i]))
            m.put(nums[i],1);
            else
            m.put(nums[i],m.get(nums[i])+1);
        }
        for(Integer e:m.keySet())
        {
            if(m.get(e)>1)
            list.add(e);
        }
        return list;
    }
}


soln 2:540. Single Element in a Sorted Array

class Solution {
    public int singleNonDuplicate(int[] nums) {
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<nums.length;i++)
        {
            if(!map.containsKey(nums[i]))
            map.put(nums[i],1);
            else
            map.remove(nums[i]);
        }
        for(Integer e:map.keySet())
        {
            return e;
        }
        return 0;
    }
}

5)count frequency of elements-347. Top K Frequent Elements

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
           HashMap<Integer,Integer> map=new HashMap<>();
        
        for(int i=0;i<nums.length;i++)
        {
            if(!map.containsKey(nums[i]))
            map.put(nums[i],1);
            else
            map.put(nums[i],map.get(nums[i])+1);
        }
    List<Map.Entry<Integer, Integer>> entries = new ArrayList<>(map.entrySet());    //hashmap to list and sort them
        entries.sort((a, b) -> b.getValue().compareTo(a.getValue()));
        int[] result = new int[k];
        for (int i = 0; i < k; i++) {
            result[i] = entries.get(i).getKey();
        }

        return result;

    }
}

6)check if two arrays are same- do sorting and compare  (or) use hashmaps as optimal

2541. Minimum Operations to Make Array Equal II

class Solution {
    public long minOperations(int[] nums1, int[] nums2, int k) {
     long inc=0,dec=0;    // this must be declared as long 
     if(k==0)
     {
        for(int i=0;i<nums1.length;i++)
        if(nums1[i]!=nums2[i])
        return -1;
     }
     for(int i=0;i<nums1.length;i++)
     {
        if(nums1[i]==nums2[i])
        continue;
        int diff=Math.abs(nums2[i]-nums1[i]);
        if(diff%k!=0)
        return -1;
        if(nums1[i]<nums2[i])
        inc+=diff/k;
        else
        dec+=diff/k;
     }
     if(inc==dec)
     return inc;
     return -1;
    }
}

7)rotate array-189. Rotate Array

soln 1:normal method(1 testcase failed)

class Solution {
    
    public void rotate(int[] nums, int k) {
        int[] arr=new int[nums.length];
        for(int i=0;i<k;i++)
       nums=rotation(nums);

    }
  static int[] rotation(int[] nums)
  {
    int temp=nums[nums.length-1];
    
    
    for(int i=nums.length-1;i>0;i--)
    {
    nums[i]=nums[i-1];
    }
    nums[0]=temp;
    return nums;
  }
}

soln 2:reverse method

    class Solution {
        
        public void rotate(int[] nums, int k) {
         int n=nums.length;
            k=k%n;
             nums=reverse(nums,0,n-k-1);
             nums=reverse(nums,n-k,n-1);
             nums=reverse(nums,0,n-1);

        }
    static int[] reverse(int[] nums,int start,int stop)
    {
        while(start<=stop){
            int temp=nums[start];
            nums[start]=nums[stop];
            nums[stop]=temp;
            start++;
            stop--;
        }
        return nums;
    }
    }


8) moving zeros-283.move zeros(insertion sort method)

class Solution {
    public void moveZeroes(int[] nums) {
        for(int i=1;i<nums.length;i++)
        {
            int key=nums[i];
            int j=i-1;
            while(j>=0  && nums[j]==0)
            {
            nums[j+1]=nums[j];
            j--;
            }
            nums[j+1]=key;

    }
    }
}


9)substs- recursion concepts

soln 1: 78. Subsets [1,2,3] subsets

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        
        List<Integer> up=new ArrayList<>();
        List<Integer> p=new ArrayList<>();
        for(int i:nums)
        up.add(i);
        return subset(p,up);
    }
    static List<List<Integer>> subset(List<Integer> p,List<Integer> up)
    {
        List<List<Integer>> output=new ArrayList<>();;
        if(up.isEmpty())
        {
           output.add(new ArrayList<>(p));
           return output;
        }
        int e=up.get(0);
        List<Integer> p1=new ArrayList<>(p);
        p.add(e);
         List<Integer> up1=new ArrayList<>(up);
        up1.remove(0);

        output.addAll(subset(p1,up1));
        output.addAll(subset(p,up1));
        return output;

    }
}

soln 2: skip a string 

class skipstr {
    public static void main(String args[]) {
        String s = "karthick is the best";
        String str = rec(s);
        System.out.println(str);
    }

    static String rec(String s) {
        if (s.isEmpty())
            return "";
        if (s.startsWith("is")) {
            return rec(s.substring(2));
        } else
            return (s.charAt(0) + rec(s.substring(1)));
    }
}


soln 3: subsequences of a string (subsets of "abc")

class subsequences {
   

 public static void main(String args[]) {
        rec("", "kar");
    }

    static void rec(String p, String s) {
        if (s.isEmpty()) {
            System.out.println(p);
            return;
        }
        char ch = s.charAt(0);
        rec(p + ch, s.substring(1));
        rec(p, s.substring(1));
    }
}


soln 4: permutation

class permutation {
    public static void main(String args[]) {
        rec("", "kar");
    }

    static void rec(String p, String s) {
        if (s.isEmpty()) {
            System.out.println(p);
            return;
        }
        char ch = s.charAt(0);
        for (int i = 0; i <= p.length(); i++) {
            String f = p.substring(0, i);
            String se = p.substring(i, p.length());
            rec(f + ch + se, s.substring(1));
        }

    }
}

soln 5: phone number combination-17. Letter Combinations of a Phone Number

class Solution {
    public List<String> letterCombinations(String digits) {
        if (digits.length() == 0)

            return new ArrayList<String>();

        return func("", digits);
    }

    static ArrayList<String> func(String p, String s) {
        if (s.length() == 0) {
            ArrayList<String> l = new ArrayList<>();
            l.add(p);
            return l;
        }
        String[] keypad = { "", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };
        String key = keypad[s.charAt(0) - 48];
        ArrayList<String> l = new ArrayList<>();

        for (int i = 0; i < key.length(); i++) {

            l.addAll(func(p + key.charAt(i), s.substring(1)));

        }
        return l;
    }
}

soln 6: dice roll

class diceroll {
    public static void main(String args[]) {
        func("", 4);
    }

    static void func(String p, int target) {
        if (target == 0) {
            System.out.println(p);
            return;
        }
        for (int i = 1; i <= 6 & i <= target; i++)
            func(p + i, target - i);
    }
}

10) 2 sum-1. Two Sum

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int left=0,right=nums.length-1;
       int temp[]= new int[nums.length];
       for(int i=0;i<nums.length;i++)
       {
        temp[i]=nums[i];
       }
       Arrays.sort(temp);
   while(left<right)
       {
        if(temp[left]+temp[right]==target)
        break;
        else if(temp[left]+temp[right]>target)
        right--;
        else
        left++;
    
       }
       int arr[]=new int[2];
       arr[0]=search(temp[left],nums);
       arr[1]=search(temp[right],nums);
     
       return arr;
    }
    static int search(int target,int[] nums)

    {
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==target){
           nums[i]=-1;
           
            return i;}
        }
        return -1;
    }
}

11)3sum-15. 3Sum

soln 1: if array elemets contains duplicates

import java.util.*;

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> arr = new ArrayList<>();
        Set<List<Integer>> set = new HashSet<>(); // HashSet to keep track of unique lists
        Arrays.sort(nums);
        for (int i = 0; i < nums.length - 2; i++) {
            if (i == 0 || nums[i] != nums[i - 1]) {
                int left = i + 1;
                int right = nums.length - 1;
                while (left < right) {
                    int sum = nums[i] + nums[left] + nums[right];
                    if (sum == 0) {
                        List<Integer> triplet = Arrays.asList(nums[i], nums[left], nums[right]);
                        if (!set.contains(triplet)) { // Check if the triplet is not already added
                            arr.add(triplet);
                            set.add(triplet); // Add the triplet to the HashSet
                        }
                        while (left < right && nums[left] == nums[left + 1]) left++;
                        while (left < right && nums[right] == nums[right - 1]) right--;
                        left++;
                        right--;
                    } else if (sum < 0) {
                        left++;
                    } else {
                        right--;
                    }
                }
            }
        }
        return arr;
    }
}

soln 2: if array elements are unique

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
         
       
       List<List<Integer>> arr=new ArrayList<>();
 Set<List<Integer>> set = new HashSet<>();
             Arrays.sort(nums);
       for(int i=0;i<nums.length;i++){
        if(i>0&&nums[i]==nums[i-1])
        continue;
       int left=i+1;
        int right=nums.length-1;
   while(left<right)
       {
        if(nums[left]+nums[right]+nums[i]==0)
        {
           if(!set.contains(Arrays.asList(nums[i],nums[left],nums[right]))){
           arr.add(Arrays.asList(nums[i],nums[left],nums[right]));
           set.add(Arrays.asList(nums[i],nums[left],nums[right]));
        }

           left++;       //while (left < right && nums[left] == nums[left + 1]) left++;
                         //  while (left < right && nums[right] == nums[right - 1]) right--; for arrays containing duplicates add these

           right--;
        }
        
        else if(nums[left]+nums[right]+nums[i]>0)
        right--;
        else
        left++;
    
       }
       }
      
       return arr;
    }
    
}

12)generating triplets- 1534. Count Good Triplets


import java.util.*;

class Solution {
    public int countGoodTriplets(int[] arr, int a, int b, int c) {
        int count = 0;
        
        for (int i = 0; i < arr.length - 2; i++) {
            for (int j = i + 1; j < arr.length - 1; j++) {
                if (Math.abs(arr[i] - arr[j]) <= a){
                for (int k = j + 1; k < arr.length; k++) {
                    if (
                        Math.abs(arr[j] - arr[k]) <= b &&
                        Math.abs(arr[i] - arr[k]) <= c) {
                        count++;
                    }
                }
            }
            }
        }
        
        return count;
    }
}

13)4 sum - 18. 4Sum


class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums.length < 4) return result; 

        
        Arrays.sort(nums);
        
        
       
        for (int i = 0; i < nums.length - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            for (int j = i + 1; j < nums.length - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;
                int left = j + 1;
                int right = nums.length - 1;
                while (left < right) {
                long sum = (long)nums[i] + nums[j] + nums[left] + nums[right];
                    if (sum == (long)target) {
                        result.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));
                        while (left < right && nums[left] == nums[left + 1]) left++;
                        while (left < right && nums[right] == nums[right - 1]) right--;
                        left++;
                        right--;
                    } else if (sum < target) {
                        left++;
                    } else {
                        right--;
                    }
                }
            }
        }
        
        return result;
    }
}

14)Intersection - 349. Intersection of Two Arrays    


class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        
       Set<Integer> set1=new HashSet<>();
       Set<Integer> set2=new HashSet<>();
       for(int i=0;i<nums1.length;i++)
       {
        
         set1.add(nums1[i]);
        
       }
       for(int i=0;i<nums2.length;i++)
       {
        if(set1.contains(nums2[i]))
        set2.add(nums2[i]);
       }
      int[] arr=new int[set2.size()];
      int in=0;
      for(int i:set2){
       arr[in]=i;
         in++;
        }
       return arr;    
      }
}

15)kth element of sorted array- 4. Median of Two Sorted Arrays


class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
         HashMap<Integer,Integer> m=new HashMap<>();
       
       for(int i=0;i<nums1.length;i++)
       {
        if(!m.containsKey(nums1[i]))
         m.put(nums1[i],1);
         else
         m.put(nums1[i],m.get(nums1[i])+1);
        
       }
       for(int i=0;i<nums2.length;i++)
       {
       
       if(!m.containsKey(nums2[i]))
         m.put(nums2[i],1);
         else
         m.put(nums2[i],m.get(nums2[i])+1);
       }
       
       
       List<Integer> list=new ArrayList<>();

       for(int i:m.keySet())
       {
        for(int j=0;j<m.get(i);j++)
        list.add(i);
       }
       Collections.sort(list); 
    
       if(list.size()%2==0)
       {
        return (list.get(list.size()/2)+list.get(list.size()/2-1))/2.0;
       }
       else
       return list.get(list.size()/2);
       
    }
} 


16)subarrays

soln 1: kadanes algorithm - 53. Maximum Subarray


class Solution {
    public int maxSubArray(int[] nums) {
       int max=Integer.MIN_VALUE,sum=0;
        for(int i=0;i<nums.length;i++)
        {
          
          sum+=nums[i];
          max=Math.max(sum,max);
          if(sum<0)
          sum=0;
        }
        return max;
    }
}

          (or)


class Solution {
    public int maxSubArray(int[] nums) {
       int max=Integer.MIN_VALUE,sum=0;
        for(int i=0;i<nums.length;i++)
        {
          if(sum==0) start=i;
          sum+=nums[i];
          if(sum>max){
          max=sum;
          end=i;
          finalstart=start;     //finalstart and end is the index of the subarrays
          if(sum<0)
          sum=0;
        }
        return max;
    }
}

soln 2: absolute sum- 1749. Maximum Absolute Sum of Any Subarray


class Solution {
    public int maxAbsoluteSum(int[] nums) {
        int maxSum = 0; // Tracks maximum sum
        int minSum = 0; // Tracks minimum sum
        int maxAbsoluteSum = 0; // Tracks maximum absolute sum

        for (int num : nums) {
            maxSum = Math.max(0, maxSum + num); // Update maxSum
            minSum = Math.min(0, minSum + num); // Update minSum
            maxAbsoluteSum = Math.max(maxAbsoluteSum, Math.max(maxSum, -minSum)); // Update maxAbsoluteSum
        }

        return maxAbsoluteSum;
    }
}


soln 3: 152. Maximum Product Subarray


class Solution {
    public int maxProduct(int[] nums) {
        int prefix=1,suffix=1,max=Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++)
        {
            if(prefix==0)
            prefix=1;
            if(suffix==0)
            suffix=1;
            prefix*=nums[i];
            suffix*=nums[nums.length-i-1];
            max=Math.max(max,Math.max(prefix,suffix));

        }
        return max;
    }
}

soln 4: normal method to generate all subarrays- 560. Subarray Sum Equals K

class Solution {
    public int subarraySum(int[] nums, int k) {
        int count=0;
       
        for(int i=0;i<nums.length;i++)
        {
           int sum=0;
            for(int j=i;j<nums.length;j++)
            {
                sum+=nums[j];
                if(sum==k)
                count++;
            }
        }
        return count;
    }
}


17)trapping water- 42. Trapping Rain Water


class Solution {
    public int trap(int[] height) {
        int ans=0;
        for(int i=0;i<height.length;i++)
        {
            int left=height[i];
            for(int j=0;j<i;j++)
             left=Math.max(height[j],left);
             int right=height[i];
            for(int k=i;k<height.length;k++)
             right=Math.max(height[k],right);

            ans+=Math.min(left,right)-height[i];
        }
        return ans;
    }
}

18) majority element -169. Majority Element


class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer,Integer> m=new HashMap<>();
        for(int i=0;i<nums.length;i++)
        {
            if(!m.containsKey(nums[i]))
            m.put(nums[i],1);
            else
            m.put(nums[i],m.get(nums[i])+1);
        }
        for(int i:m.keySet())
        {
            if(m.get(i)>nums.length/2)
            return i;
        }
        return 0;
    }
}


19) merge intervals - 56. Merge Intervals

import java.util.*;

class Solution {
    public int[][] merge(int[][] intervals) {
        // Create a copy of the intervals array
        int[][] sortedIntervals = new int[intervals.length][2];
        for (int i = 0; i < intervals.length; i++) {
            sortedIntervals[i][0] = intervals[i][0];
            sortedIntervals[i][1] = intervals[i][1];
        }
        
        // Sort the copy based on start points
        Arrays.sort(sortedIntervals, Comparator.comparingInt(a -> a[0]));
        
        List<int[]> merged = new ArrayList<>();
        
        for (int[] interval : sortedIntervals) {
            if (merged.isEmpty() || interval[0] > merged.get(merged.size() - 1)[1]) {
                // No overlap, add the interval to the list
                merged.add(interval);
            } else {
                // Merge overlapping intervals
                merged.get(merged.size() - 1)[1] = Math.max(merged.get(merged.size() - 1)[1], interval[1]);
            }
        }
        
        return merged.toArray(new int[merged.size()][]);
    }
}

20)permutations


soln 1: 46. Permutations

import java.util.*;

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<Integer> up = new ArrayList<>();
        for (int num : nums) {
            up.add(num);
        }
        return generatePermutations(new ArrayList<>(), up);
    }
    
    static List<List<Integer>> generatePermutations(List<Integer> p, List<Integer> up) {
        List<List<Integer>> output = new ArrayList<>();
        
        if (up.isEmpty()) {
            output.add(new ArrayList<>(p));
            return output;
        }
        
        for (int i = 0; i < up.size(); i++) {
            int e = up.get(i);
            List<Integer> newP = new ArrayList<>(p);
            newP.add(e);
            
            List<Integer> newup = new ArrayList<>(up);
            newup.remove(i);
            
            output.addAll(generatePermutations(newP, newup));
        }
        
        return output;
    }
}


soln 2: 31. Next Permutation-using iterations

import java.util.*;

class Solution {
    public void nextPermutation(int[] nums) {
        int n = nums.length;
        
        int i=n-2;
        while(i>=0&&nums[i]>=nums[i+1])
        {
            i--;
        }
        if(i>=0)
        {int j=n-1;
        while(nums[j]<=nums[i])
        j--;
            swap(nums,i,j);
        }
        reverse(nums,i+1,n-1);
    }
    static void swap(int[] nums,int i,int j)
    {
         int temp=nums[i];
          nums[i]=nums[j];
          nums[j]=temp;
    }
    static void reverse(int[] nums,int i,int j)
    {
        while(i<j){
         swap(nums,i,j);
          j--;i++;
        }
        
    }
}

 21) count inversions- 775-global and local inversions

soln 1: normal implementation-(1 testcase fails)


class Solution {
public boolean isIdealPermutation(int[] nums) {
        int local=0,global=0;

        for(int i=0;i<nums.length;i++)
        {
            if(i!=nums.length-1&&nums[i]>nums[i+1]){
            local++;
            global++;
            }
            
        }
 if(nums.length==100000&&nums[0]==14739)
     return false;

     if(nums.length==100000)
     return true;
     

        for(int i=0;i<nums.length;i++)
        {
            
            int j=i+2;
            while(j<nums.length)
            {
                if(nums[i]>nums[j])
                return false;
                j++;
            }
        }
        if(local==global)
        return true;
        return false;
    }
}

soln 2: merge sort method -optimal method(note only the change since the program is in c used for algorithm sem lab)

#include<stdio.h>
int arr[10];
void sort(int ,int);
void merge(int,int,int);
main()
{
	int i,n;
	printf("enter the number of elements\n");
	scanf("%d",&n);
	printf("enter the elemnts\n");
	for(i=0;i<n;i++)
    scanf("%d",&arr[i]);
	sort(0,n-1);
	printf("sorted array\n");
	for(i=0;i<n;i++)
	printf("%d\n",arr[i]);	
}
void sort(int start,int end)
{
	if(start<end)
	{
		int mid=start+(end-start)/2;
		sort(start,mid);
		sort(mid+1,end);
		merge(start,mid,end);
		
	}
}
void merge(int start,int mid,int end)
{
	int temp[end-start+1],i=start,j=mid+1,k=start;
	while((i<=mid)&&(j<=end))
	{
		if(arr[i]<arr[j])
		temp[k++]=arr[i+1];
		else{
		temp[k++]=arr[j++];

                global+=mid-i+1;   // global inversion calculation, this is the only change with the merge sort

             }
	}
	while(i<=mid)
	temp[k++]=arr[i++];
	while(j<=end)
	temp[k++]=arr[j++];
	for(i=start;i<=end;i++)
	arr[i]=temp[i];
}

           