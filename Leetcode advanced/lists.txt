83. Remove Duplicates from Sorted List
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode temp=head;
        while(temp!=null)
        {
            if(temp.next!=null&&temp.val==temp.next.val)
            temp.next=temp.next.next;
            else
            temp=temp.next;
        }
        return head;
        
    }
}


82. Remove Duplicates from Sorted List II
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
         ListNode temp=new ListNode(0,head);
         ListNode prev=temp;
        while(head!=null)
        {
            
            if(head.next!=null&&head.val==head.next.val)
            {
                
                while(head.next!=null&&head.val==head.next.val)
                {
                    head=head.next;
                }
                 prev.next=head.next;
           
            }
          
           
            else
                prev=prev.next;
            head=head.next;
            
           
        }
        return temp.next;
    }
}


206. Reverse Linked List
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
            if(head==null)
        return head;
        ListNode prev=null;
        ListNode present=head;
        ListNode nextt=present.next;
    
        while(present!=null)
        {
            present.next=prev;
            prev=present;
            present=nextt;
            if(nextt!=null)
            nextt=nextt.next;
        }
        return prev;
    }
}




92. Reverse Linked List II

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if(left==right)
        return head;
        
        ListNode current=head;
        
       
        ListNode prev=null;
        for(int i=0;current!=null&&i<left-1;i++)
        {
            
     prev=current;
     current=current.next; 
        
        }
         ListNode last=prev;

        ListNode newend=current;
     ListNode nextt=current.next;
        for(int i=0;current!=null&&i<right-left+1;i++)
        {
            current.next=prev;
            prev=current;
            current=nextt;
            if(nextt!=null)
            nextt=nextt.next;

    }
           if(last!=null)
           last.next=prev;
           else
           head=prev;
           newend.next=current;
 
   return head;
}

}







25. Reverse Nodes in k-Group

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(k<=1 || head==null)
        return head;
        int length=getlength(head);
        int count=length/k;
    ListNode current=head;
        
       
        ListNode prev=null;

        while(count>0)
        {
          ListNode last=prev;

        ListNode newend=current;
     ListNode nextt=current.next;
        for(int i=0;current!=null&&i<k;i++)
        {
            current.next=prev;
            prev=current;
            current=nextt;
            if(nextt!=null)
            nextt=nextt.next;

    }
           if(last!=null)
           last.next=prev;
           else
           head=prev;
           newend.next=current;
           prev=newend;


            count--;
        }
        return head;
    }
    public static int  getlength(ListNode head)
    {
        int count=0;
        ListNode temp=head;
        while(temp!=null)
        {
            count++;
            temp=temp.next;
        }
        return count;
    }
}



234. Palindrome Linked List
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
    
        ListNode temp=head;
        ListNode temp1=head;
         while(temp!=null&&temp.next!=null)
         {
            temp=temp.next.next;
            temp1=temp1.next;
         }
     temp=head;
      temp1=reverse(temp1);
        while(temp1!=null)
        {
            if(temp.val!=temp1.val)
            return false;
            
            temp=temp.next;
            temp1=temp1.next;
           
            
        }
        return true;
    }
    static ListNode reverse(ListNode head)
    {
         if(head==null)
        return head;
        ListNode prev=null;
        ListNode present=head;
        ListNode nextt=present.next;
    
        while(present!=null)
        {
            present.next=prev;
            prev=present;
            present=nextt;
            if(nextt!=null)
            nextt=nextt.next;
        }
        return prev;
    }
    }
